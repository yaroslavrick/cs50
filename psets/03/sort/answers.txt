sort1 uses: Bubble sort


How do you know?: because bubble sort gives better speed result with sorted arrays. 
And bubble sort gives the worst result to the reversed sort arrays. 
Largest to smallest will give the best result in sorted and the worst in reversed.

sort2 uses: Merge sort

How do you know?: because merge sort works faster in all cases (log n).

sort3 uses: Selection sort

How do you know?: Selection sort makes sorting "smallest to largest". 
It gives same scenario in both cases sorted and unsorted.

//                  Bubble  Merge   Selection
//                  sort1   sort2   sort3
// random 5000      0,14s   0,01s   0,08s
// random 10000     0,51s   0,01s   0,65s
// random 50000     13,58s  0,07s   5,41s

// reversed 5000    0,14s   0,01s   0,06s
// reversed 10000   0,50s   0,01s   0,24s
// reversed 50000   12,07s  0,06s   5,57s

// sorted 5000      0,00s   0,01s   0,06s
// sorted 10000     0,01s   0,01s   0,23s
// sorted 50000     0,05s   0,06s   5,23s